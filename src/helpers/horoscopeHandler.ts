import TelegramBot from 'node-telegram-bot-api';
import { db } from '../firebase';
import { DateTime } from 'luxon';
import axios, { AxiosError } from 'axios';
import aiSettings from '../aiSettings.json';

const zodiacSigns: Record<string, string> = {
  '–æ–≤–µ–Ω': '‚ôàÔ∏è',
  '—Ç–µ–ª–µ—Ü': '‚ôâÔ∏è',
  '–±–ª–∏–∑–Ω–µ—Ü—ã': '‚ôäÔ∏è',
  '—Ä–∞–∫': '‚ôãÔ∏è',
  '–ª–µ–≤': '‚ôåÔ∏è',
  '–¥–µ–≤–∞': '‚ôçÔ∏è',
  '–≤–µ—Å—ã': '‚ôéÔ∏è',
  '—Å–∫–æ—Ä–ø–∏–æ–Ω': '‚ôèÔ∏è',
  '—Å—Ç—Ä–µ–ª–µ—Ü': '‚ôêÔ∏è',
  '–∫–æ–∑–µ—Ä–æ–≥': '‚ôëÔ∏è',
  '–≤–æ–¥–æ–ª–µ–π': '‚ôíÔ∏è',
  '—Ä—ã–±—ã': '‚ôìÔ∏è'
};

interface HoroscopeLog {
  lastGeneratedDate: string;
  lastResponse: string;
}

const generateAIHoroscope = async (sign: string, trainingData: string): Promise<string | null> => {
  try {
    const apiKey = process.env.OPENAI_API_KEY;

    if (!apiKey) {
      throw new Error('OpenAI API key is not defined');
    }

    const prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –Ω–µ–ª–µ–ø—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ ${sign}, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ: \n\n${trainingData}. –î–æ–±–∞–≤—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π—Å—è. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤. –ù–ï –¥–æ–±–∞–≤–ª—è–π –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞, –ø–æ —Ç–∏–ø—É "–û–≤–µ–Ω,".`;

    const response = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-4-turbo',
      messages: [
        { role: 'system', content: aiSettings.systemMessage },
        { role: 'user', content: prompt }
      ],
      max_tokens: 300,
      temperature: aiSettings.temperature + 0.5,
      top_p: aiSettings.topP
    }, {
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json',
      }
    });

    return response.data.choices[0].message.content.trim();
  } catch (error: unknown) {
    if (error instanceof AxiosError) {
      console.error('Failed to generate AI horoscope:', error.response?.data || error.message);
    } else if (error instanceof Error) {
      console.error('Failed to generate AI horoscope:', error.message);
    } else {
      console.error('An unexpected error occurred during AI horoscope generation.');
    }
    return null;
  }
};

export const handleHoroscopeCommand = async (
  msg: TelegramBot.Message,
  bot: TelegramBot,
  zodiacSign: string
): Promise<void> => {
  const chatId = msg.chat.id.toString();
  const initiatorId = msg.from?.id?.toString();
  if (!initiatorId) {
    console.warn('User ID is undefined, skipping horoscope generation.');
    return;
  }

  const nowInMoscow = DateTime.now().setZone('Europe/Moscow');
  const todayDate = nowInMoscow.toISODate();

  const userDocRef = db.collection('horoscopes_logs').doc(`${initiatorId}_${zodiacSign}`);
  const userDoc = await userDocRef.get();

  if (userDoc.exists) {
    const userData = userDoc.data() as HoroscopeLog;
    const lastGeneratedDate = userData?.lastGeneratedDate;
    const lastResponse = userData?.lastResponse;

    if (lastGeneratedDate === todayDate) {
      await bot.sendMessage(chatId, lastResponse);
      return;
    }
  }

  const horoscopesSnapshot = await db.collection('horoscopes').doc('horoscopes').get();
  const horoscopesData = horoscopesSnapshot.data();

  if (!horoscopesData || !horoscopesData.data) {
    console.error('No horoscopes data object found in Firestore.');
    await bot.sendMessage(chatId, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    return;
  }

  const horoscopes = horoscopesData.data['horoscopes-text'] as string[];

  if (!horoscopes || horoscopes.length === 0) {
    console.error('Horoscopes array is empty in Firestore.');
    await bot.sendMessage(chatId, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    return;
  }

  const shuffledHoroscopes = horoscopes.sort(() => 0.5 - Math.random()).slice(0, 10);
  const trainingData = shuffledHoroscopes.join('\n');

  const aiGeneratedHoroscope = await generateAIHoroscope(zodiacSign, trainingData);

  if (!aiGeneratedHoroscope) {
    await bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ üòï');
    return;
  }

  const response = `${zodiacSigns[zodiacSign.toLowerCase()]}${zodiacSign.charAt(0).toUpperCase() + zodiacSign.slice(1)}: ${aiGeneratedHoroscope}`;

  await userDocRef.set({
    lastGeneratedDate: todayDate,
    lastResponse: response,
  });

  await bot.sendMessage(chatId, response);
};
